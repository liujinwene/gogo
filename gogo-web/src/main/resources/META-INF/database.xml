<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">


	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<!-- These properties are replaced by Maven "resources" -->
		<property name="url" value="${jdbc_url}" />
		<property name="driverClassName" value="${jdbc_driverClassName}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean>

	<bean id="connectionProvider" class="org.jooq.impl.DataSourceConnectionProvider">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- Invoking an internal, package-private constructor for the example Implement 
		your own Configuration for more reliable behaviour -->
	<bean id="config" class="org.jooq.impl.DefaultConfiguration">
		<property name="SQLDialect">
			<value type="org.jooq.SQLDialect">MYSQL</value>
		</property>
		<property name="connectionProvider" ref="connectionProvider" />
	</bean>

	<!-- Configure the DSL object, optionally overriding jOOQ Exceptions with 
		Spring Exceptions -->
	<bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
		<constructor-arg ref="config" />
	</bean>

	<!-- This is the "business-logic" -->
	<!-- <bean id="books" class="org.jooq.example.spring.impl.DefaultBookService"/> -->

	<!-- Configure Spring's transaction manager to use a DataSource -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->

	<!-- This is needed if you want to use the @Transactional annotation -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->

	<!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy, 
		which can dynamically discover the transaction context -->
	<!-- <bean id="transactionAwareDataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"> 
		<constructor-arg ref="dataSource" /> </bean> -->

	<!-- <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider"> 
		<constructor-arg ref="transactionAwareDataSource" /> </bean> -->
</beans>