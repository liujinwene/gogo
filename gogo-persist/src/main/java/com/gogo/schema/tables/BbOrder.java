/**
 * This class is generated by jOOQ
 */
package com.gogo.schema.tables;


import com.gogo.schema.Bb;
import com.gogo.schema.Keys;
import com.gogo.schema.tables.records.BbOrderRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BbOrder extends TableImpl<BbOrderRecord> {

    private static final long serialVersionUID = -475565654;

    /**
     * The reference instance of <code>bb.bb_order</code>
     */
    public static final BbOrder BB_ORDER = new BbOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BbOrderRecord> getRecordType() {
        return BbOrderRecord.class;
    }

    /**
     * The column <code>bb.bb_order.order_no</code>.
     */
    public final TableField<BbOrderRecord, Long> ORDER_NO = createField("order_no", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>bb.bb_order.status</code>.
     */
    public final TableField<BbOrderRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bb.bb_order.quantity</code>.
     */
    public final TableField<BbOrderRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bb.bb_order.total_amount</code>.
     */
    public final TableField<BbOrderRecord, BigDecimal> TOTAL_AMOUNT = createField("total_amount", org.jooq.impl.SQLDataType.DECIMAL.precision(10, 2).nullable(false), this, "");

    /**
     * The column <code>bb.bb_order.pay_type</code>. 1-deliveryCash
     */
    public final TableField<BbOrderRecord, Byte> PAY_TYPE = createField("pay_type", org.jooq.impl.SQLDataType.TINYINT, this, "1-deliveryCash");

    /**
     * The column <code>bb.bb_order.description</code>.
     */
    public final TableField<BbOrderRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>bb.bb_order.create_time</code>.
     */
    public final TableField<BbOrderRecord, Long> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>bb.bb_order.update_time</code>.
     */
    public final TableField<BbOrderRecord, Long> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>bb.bb_order.delete_flag</code>. 0-NO,1-YES
     */
    public final TableField<BbOrderRecord, Byte> DELETE_FLAG = createField("delete_flag", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0-NO,1-YES");

    /**
     * The column <code>bb.bb_order.delete_time</code>.
     */
    public final TableField<BbOrderRecord, Long> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>bb.bb_order</code> table reference
     */
    public BbOrder() {
        this("bb_order", null);
    }

    /**
     * Create an aliased <code>bb.bb_order</code> table reference
     */
    public BbOrder(String alias) {
        this(alias, BB_ORDER);
    }

    private BbOrder(String alias, Table<BbOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private BbOrder(String alias, Table<BbOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bb.BB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BbOrderRecord> getPrimaryKey() {
        return Keys.KEY_BB_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BbOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<BbOrderRecord>>asList(Keys.KEY_BB_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BbOrder as(String alias) {
        return new BbOrder(alias, this);
    }

    /**
     * Rename this table
     */
    public BbOrder rename(String name) {
        return new BbOrder(name, null);
    }
}
